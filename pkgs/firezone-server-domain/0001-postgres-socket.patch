diff --git a/apps/domain/lib/domain/config.ex b/apps/domain/lib/domain/config.ex
index 11fdcc3a1..9254f210d 100644
--- a/apps/domain/lib/domain/config.ex
+++ b/apps/domain/lib/domain/config.ex
@@ -42,6 +42,24 @@ defmodule Domain.Config do
     end
   end
 
+  @doc """
+  Similar to `compile_config/2` but returns nil if the configuration is invalid.
+
+  This function does not resolve values from the database because it's intended use is during
+  compilation and before application boot (in `config/runtime.exs`).
+
+  If you need to resolve values from the database, use `fetch_config/1` or `fetch_config!/1`.
+  """
+  def compile_config(module \\ Definitions, key, env_config \\ System.get_env()) do
+    case Fetcher.fetch_source_and_config(module, key, %{}, env_config) do
+      {:ok, _source, value} ->
+        value
+
+      {:error, reason} ->
+        nil
+    end
+  end
+
   def config_changeset(changeset, schema_key, config_key \\ nil) do
     config_key = config_key || schema_key
 
diff --git a/apps/domain/lib/domain/config/definitions.ex b/apps/domain/lib/domain/config/definitions.ex
index 8cd2e8d0f..f27d67c69 100644
--- a/apps/domain/lib/domain/config/definitions.ex
+++ b/apps/domain/lib/domain/config/definitions.ex
@@ -61,6 +61,7 @@ defmodule Domain.Config.Definitions do
       {"Database",
        [
          :database_host,
+         :database_socket_dir,
          :database_port,
          :database_name,
          :database_user,
@@ -255,6 +256,11 @@ defmodule Domain.Config.Definitions do
   """
   defconfig(:database_host, :string, default: "postgres")
 
+  @doc """
+  PostgreSQL socket directory (takes precedence over hostname).
+  """
+  defconfig(:database_socket_dir, :string, default: nil)
+
   @doc """
   PostgreSQL port.
   """
diff --git a/config/runtime.exs b/config/runtime.exs
index 7817942fa..14cbe182f 100644
--- a/config/runtime.exs
+++ b/config/runtime.exs
@@ -1,22 +1,31 @@
 import Config
 
 if config_env() == :prod do
-  import Domain.Config, only: [compile_config!: 1]
+  import Domain.Config, only: [compile_config!: 1, compile_config: 1]
 
   ###############################
   ##### Domain ##################
   ###############################
 
-  config :domain, Domain.Repo,
-    database: compile_config!(:database_name),
-    username: compile_config!(:database_user),
-    hostname: compile_config!(:database_host),
-    port: compile_config!(:database_port),
-    password: compile_config!(:database_password),
-    pool_size: compile_config!(:database_pool_size),
-    ssl: compile_config!(:database_ssl_enabled),
-    ssl_opts: compile_config!(:database_ssl_opts),
-    parameters: compile_config!(:database_parameters)
+  config :domain,
+         Domain.Repo,
+         [
+           {:database, compile_config!(:database_name)},
+           {:username, compile_config!(:database_user)},
+           {:port, compile_config!(:database_port)},
+           {:pool_size, compile_config!(:database_pool_size)},
+           {:ssl, compile_config!(:database_ssl_enabled)},
+           {:ssl_opts, compile_config!(:database_ssl_opts)},
+           {:parameters, compile_config!(:database_parameters)}
+         ] ++
+           if(compile_config(:database_password),
+             do: [{:password, compile_config!(:database_password)}],
+             else: []
+           ) ++
+           if(compile_config(:database_socket_dir),
+             do: [{:socket_dir, compile_config!(:database_socket_dir)}],
+             else: [{:hostname, compile_config!(:database_host)}]
+           )
 
   config :domain, Domain.Tokens,
     key_base: compile_config!(:tokens_key_base),

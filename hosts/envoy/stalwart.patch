diff --git a/crates/directory/src/backend/sql/lookup.rs b/crates/directory/src/backend/sql/lookup.rs
index e49c5dab..18c9005e 100644
--- a/crates/directory/src/backend/sql/lookup.rs
+++ b/crates/directory/src/backend/sql/lookup.rs
@@ -25,6 +25,7 @@ impl SqlDirectory {
             QueryBy::Name(username) => {
                 account_name = username.to_string();
 
+                tracing::info!(context = "directory", event = "sql lookup", username = username, "Name -> query_name");
                 self.store
                     .query::<NamedRows>(&self.mappings.query_name, vec![username.into()])
                     .await?
@@ -37,6 +38,7 @@ impl SqlDirectory {
                 }
                 account_id = Some(uid);
 
+                tracing::info!(context = "directory", event = "sql lookup", username = account_name, "Id -> query_name");
                 self.store
                     .query::<NamedRows>(
                         &self.mappings.query_name,
@@ -53,6 +55,7 @@ impl SqlDirectory {
                 account_name = username.to_string();
                 secret = secret_.into();
 
+                tracing::info!(context = "directory", event = "sql lookup", username = username, "Credentials -> query_name");
                 self.store
                     .query::<NamedRows>(&self.mappings.query_name, vec![username.into()])
                     .await?
@@ -112,6 +115,7 @@ impl SqlDirectory {
 
         // Obtain emails
         if !self.mappings.query_emails.is_empty() {
+            tracing::info!(context = "directory", event = "sql lookup", principal_name = principal.name, "Query emails");
             principal.emails = self
                 .store
                 .query::<Rows>(
@@ -126,6 +130,7 @@ impl SqlDirectory {
     }
 
     pub async fn email_to_ids(&self, address: &str) -> crate::Result<Vec<u32>> {
+        tracing::info!(context = "directory", event = "sql lookup", address = address, "Query recipients");
         let names = self
             .store
             .query::<Rows>(&self.mappings.query_recipients, vec![address.into()])
@@ -143,6 +148,7 @@ impl SqlDirectory {
     }
 
     pub async fn rcpt(&self, address: &str) -> crate::Result<bool> {
+        tracing::info!(context = "directory", event = "sql lookup", address = address, "Query rcpt");
         self.store
             .query::<bool>(
                 &self.mappings.query_recipients,
@@ -153,6 +159,7 @@ impl SqlDirectory {
     }
 
     pub async fn vrfy(&self, address: &str) -> crate::Result<Vec<String>> {
+        tracing::info!(context = "directory", event = "sql lookup", address = address, "Query vrfy");
         self.store
             .query::<Rows>(
                 &self.mappings.query_verify,
@@ -164,6 +171,7 @@ impl SqlDirectory {
     }
 
     pub async fn expn(&self, address: &str) -> crate::Result<Vec<String>> {
+        tracing::info!(context = "directory", event = "sql lookup", address = address, "Query expn");
         self.store
             .query::<Rows>(
                 &self.mappings.query_expand,
@@ -175,6 +183,7 @@ impl SqlDirectory {
     }
 
     pub async fn is_local_domain(&self, domain: &str) -> crate::Result<bool> {
+        tracing::info!(context = "directory", event = "sql lookup", domain = domain, "Query is local domain");
         self.store
             .query::<bool>(&self.mappings.query_domains, vec![domain.into()])
             .await
